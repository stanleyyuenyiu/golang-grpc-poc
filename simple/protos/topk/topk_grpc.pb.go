// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: protos/topk/topk.proto

package topk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TopkClient is the client API for Topk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopkClient interface {
	IncreaseCounter(ctx context.Context, in *IncreaseCounterReq, opts ...grpc.CallOption) (*IncreaseCounterRes, error)
	StreamIncreaseCounter(ctx context.Context, opts ...grpc.CallOption) (Topk_StreamIncreaseCounterClient, error)
	ListTopK(ctx context.Context, in *ListTopKReq, opts ...grpc.CallOption) (*ListTopKRes, error)
	StreamListTopK(ctx context.Context, in *ListTopKReq, opts ...grpc.CallOption) (Topk_StreamListTopKClient, error)
}

type topkClient struct {
	cc grpc.ClientConnInterface
}

func NewTopkClient(cc grpc.ClientConnInterface) TopkClient {
	return &topkClient{cc}
}

func (c *topkClient) IncreaseCounter(ctx context.Context, in *IncreaseCounterReq, opts ...grpc.CallOption) (*IncreaseCounterRes, error) {
	out := new(IncreaseCounterRes)
	err := c.cc.Invoke(ctx, "/topk.Topk/IncreaseCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topkClient) StreamIncreaseCounter(ctx context.Context, opts ...grpc.CallOption) (Topk_StreamIncreaseCounterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Topk_ServiceDesc.Streams[0], "/topk.Topk/StreamIncreaseCounter", opts...)
	if err != nil {
		return nil, err
	}
	x := &topkStreamIncreaseCounterClient{stream}
	return x, nil
}

type Topk_StreamIncreaseCounterClient interface {
	Send(*IncreaseCounterReq) error
	Recv() (*ListTopKRes, error)
	grpc.ClientStream
}

type topkStreamIncreaseCounterClient struct {
	grpc.ClientStream
}

func (x *topkStreamIncreaseCounterClient) Send(m *IncreaseCounterReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *topkStreamIncreaseCounterClient) Recv() (*ListTopKRes, error) {
	m := new(ListTopKRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *topkClient) ListTopK(ctx context.Context, in *ListTopKReq, opts ...grpc.CallOption) (*ListTopKRes, error) {
	out := new(ListTopKRes)
	err := c.cc.Invoke(ctx, "/topk.Topk/ListTopK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topkClient) StreamListTopK(ctx context.Context, in *ListTopKReq, opts ...grpc.CallOption) (Topk_StreamListTopKClient, error) {
	stream, err := c.cc.NewStream(ctx, &Topk_ServiceDesc.Streams[1], "/topk.Topk/StreamListTopK", opts...)
	if err != nil {
		return nil, err
	}
	x := &topkStreamListTopKClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Topk_StreamListTopKClient interface {
	Recv() (*ListTopKRes, error)
	grpc.ClientStream
}

type topkStreamListTopKClient struct {
	grpc.ClientStream
}

func (x *topkStreamListTopKClient) Recv() (*ListTopKRes, error) {
	m := new(ListTopKRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TopkServer is the server API for Topk service.
// All implementations must embed UnimplementedTopkServer
// for forward compatibility
type TopkServer interface {
	IncreaseCounter(context.Context, *IncreaseCounterReq) (*IncreaseCounterRes, error)
	StreamIncreaseCounter(Topk_StreamIncreaseCounterServer) error
	ListTopK(context.Context, *ListTopKReq) (*ListTopKRes, error)
	StreamListTopK(*ListTopKReq, Topk_StreamListTopKServer) error
	mustEmbedUnimplementedTopkServer()
}

// UnimplementedTopkServer must be embedded to have forward compatible implementations.
type UnimplementedTopkServer struct {
}

func (UnimplementedTopkServer) IncreaseCounter(context.Context, *IncreaseCounterReq) (*IncreaseCounterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseCounter not implemented")
}
func (UnimplementedTopkServer) StreamIncreaseCounter(Topk_StreamIncreaseCounterServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamIncreaseCounter not implemented")
}
func (UnimplementedTopkServer) ListTopK(context.Context, *ListTopKReq) (*ListTopKRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopK not implemented")
}
func (UnimplementedTopkServer) StreamListTopK(*ListTopKReq, Topk_StreamListTopKServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamListTopK not implemented")
}
func (UnimplementedTopkServer) mustEmbedUnimplementedTopkServer() {}

// UnsafeTopkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopkServer will
// result in compilation errors.
type UnsafeTopkServer interface {
	mustEmbedUnimplementedTopkServer()
}

func RegisterTopkServer(s grpc.ServiceRegistrar, srv TopkServer) {
	s.RegisterService(&Topk_ServiceDesc, srv)
}

func _Topk_IncreaseCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseCounterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopkServer).IncreaseCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topk.Topk/IncreaseCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopkServer).IncreaseCounter(ctx, req.(*IncreaseCounterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topk_StreamIncreaseCounter_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TopkServer).StreamIncreaseCounter(&topkStreamIncreaseCounterServer{stream})
}

type Topk_StreamIncreaseCounterServer interface {
	Send(*ListTopKRes) error
	Recv() (*IncreaseCounterReq, error)
	grpc.ServerStream
}

type topkStreamIncreaseCounterServer struct {
	grpc.ServerStream
}

func (x *topkStreamIncreaseCounterServer) Send(m *ListTopKRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *topkStreamIncreaseCounterServer) Recv() (*IncreaseCounterReq, error) {
	m := new(IncreaseCounterReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Topk_ListTopK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopKReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopkServer).ListTopK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topk.Topk/ListTopK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopkServer).ListTopK(ctx, req.(*ListTopKReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topk_StreamListTopK_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTopKReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TopkServer).StreamListTopK(m, &topkStreamListTopKServer{stream})
}

type Topk_StreamListTopKServer interface {
	Send(*ListTopKRes) error
	grpc.ServerStream
}

type topkStreamListTopKServer struct {
	grpc.ServerStream
}

func (x *topkStreamListTopKServer) Send(m *ListTopKRes) error {
	return x.ServerStream.SendMsg(m)
}

// Topk_ServiceDesc is the grpc.ServiceDesc for Topk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Topk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "topk.Topk",
	HandlerType: (*TopkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncreaseCounter",
			Handler:    _Topk_IncreaseCounter_Handler,
		},
		{
			MethodName: "ListTopK",
			Handler:    _Topk_ListTopK_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamIncreaseCounter",
			Handler:       _Topk_StreamIncreaseCounter_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamListTopK",
			Handler:       _Topk_StreamListTopK_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/topk/topk.proto",
}
